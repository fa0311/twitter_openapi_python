# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import StrictInt, StrictStr


from twitter_openapi_python_generated.api_client import ApiClient
from twitter_openapi_python_generated.api_response import ApiResponse
from twitter_openapi_python_generated.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class V11PostApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def post_create_friendships(self, include_blocked_by : StrictInt, include_blocking : StrictInt, include_can_dm : StrictInt, include_can_media_tag : StrictInt, include_ext_has_nft_avatar : StrictInt, include_ext_is_blue_verified : StrictInt, include_ext_profile_image_shape : StrictInt, include_ext_verified_type : StrictInt, include_followed_by : StrictInt, include_mute_edge : StrictInt, include_profile_interstitial_type : StrictInt, include_want_retweets : StrictInt, skip_status : StrictInt, user_id : StrictStr, **kwargs) -> None:  # noqa: E501
        """post_create_friendships  # noqa: E501

        post create friendships  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_create_friendships(include_blocked_by, include_blocking, include_can_dm, include_can_media_tag, include_ext_has_nft_avatar, include_ext_is_blue_verified, include_ext_profile_image_shape, include_ext_verified_type, include_followed_by, include_mute_edge, include_profile_interstitial_type, include_want_retweets, skip_status, user_id, async_req=True)
        >>> result = thread.get()

        :param include_blocked_by: (required)
        :type include_blocked_by: int
        :param include_blocking: (required)
        :type include_blocking: int
        :param include_can_dm: (required)
        :type include_can_dm: int
        :param include_can_media_tag: (required)
        :type include_can_media_tag: int
        :param include_ext_has_nft_avatar: (required)
        :type include_ext_has_nft_avatar: int
        :param include_ext_is_blue_verified: (required)
        :type include_ext_is_blue_verified: int
        :param include_ext_profile_image_shape: (required)
        :type include_ext_profile_image_shape: int
        :param include_ext_verified_type: (required)
        :type include_ext_verified_type: int
        :param include_followed_by: (required)
        :type include_followed_by: int
        :param include_mute_edge: (required)
        :type include_mute_edge: int
        :param include_profile_interstitial_type: (required)
        :type include_profile_interstitial_type: int
        :param include_want_retweets: (required)
        :type include_want_retweets: int
        :param skip_status: (required)
        :type skip_status: int
        :param user_id: (required)
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the post_create_friendships_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.post_create_friendships_with_http_info(include_blocked_by, include_blocking, include_can_dm, include_can_media_tag, include_ext_has_nft_avatar, include_ext_is_blue_verified, include_ext_profile_image_shape, include_ext_verified_type, include_followed_by, include_mute_edge, include_profile_interstitial_type, include_want_retweets, skip_status, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def post_create_friendships_with_http_info(self, include_blocked_by : StrictInt, include_blocking : StrictInt, include_can_dm : StrictInt, include_can_media_tag : StrictInt, include_ext_has_nft_avatar : StrictInt, include_ext_is_blue_verified : StrictInt, include_ext_profile_image_shape : StrictInt, include_ext_verified_type : StrictInt, include_followed_by : StrictInt, include_mute_edge : StrictInt, include_profile_interstitial_type : StrictInt, include_want_retweets : StrictInt, skip_status : StrictInt, user_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """post_create_friendships  # noqa: E501

        post create friendships  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_create_friendships_with_http_info(include_blocked_by, include_blocking, include_can_dm, include_can_media_tag, include_ext_has_nft_avatar, include_ext_is_blue_verified, include_ext_profile_image_shape, include_ext_verified_type, include_followed_by, include_mute_edge, include_profile_interstitial_type, include_want_retweets, skip_status, user_id, async_req=True)
        >>> result = thread.get()

        :param include_blocked_by: (required)
        :type include_blocked_by: int
        :param include_blocking: (required)
        :type include_blocking: int
        :param include_can_dm: (required)
        :type include_can_dm: int
        :param include_can_media_tag: (required)
        :type include_can_media_tag: int
        :param include_ext_has_nft_avatar: (required)
        :type include_ext_has_nft_avatar: int
        :param include_ext_is_blue_verified: (required)
        :type include_ext_is_blue_verified: int
        :param include_ext_profile_image_shape: (required)
        :type include_ext_profile_image_shape: int
        :param include_ext_verified_type: (required)
        :type include_ext_verified_type: int
        :param include_followed_by: (required)
        :type include_followed_by: int
        :param include_mute_edge: (required)
        :type include_mute_edge: int
        :param include_profile_interstitial_type: (required)
        :type include_profile_interstitial_type: int
        :param include_want_retweets: (required)
        :type include_want_retweets: int
        :param skip_status: (required)
        :type skip_status: int
        :param user_id: (required)
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'include_blocked_by',
            'include_blocking',
            'include_can_dm',
            'include_can_media_tag',
            'include_ext_has_nft_avatar',
            'include_ext_is_blue_verified',
            'include_ext_profile_image_shape',
            'include_ext_verified_type',
            'include_followed_by',
            'include_mute_edge',
            'include_profile_interstitial_type',
            'include_want_retweets',
            'skip_status',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_friendships" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['include_blocked_by']:
            _form_params.append(('include_blocked_by', _params['include_blocked_by']))

        if _params['include_blocking']:
            _form_params.append(('include_blocking', _params['include_blocking']))

        if _params['include_can_dm']:
            _form_params.append(('include_can_dm', _params['include_can_dm']))

        if _params['include_can_media_tag']:
            _form_params.append(('include_can_media_tag', _params['include_can_media_tag']))

        if _params['include_ext_has_nft_avatar']:
            _form_params.append(('include_ext_has_nft_avatar', _params['include_ext_has_nft_avatar']))

        if _params['include_ext_is_blue_verified']:
            _form_params.append(('include_ext_is_blue_verified', _params['include_ext_is_blue_verified']))

        if _params['include_ext_profile_image_shape']:
            _form_params.append(('include_ext_profile_image_shape', _params['include_ext_profile_image_shape']))

        if _params['include_ext_verified_type']:
            _form_params.append(('include_ext_verified_type', _params['include_ext_verified_type']))

        if _params['include_followed_by']:
            _form_params.append(('include_followed_by', _params['include_followed_by']))

        if _params['include_mute_edge']:
            _form_params.append(('include_mute_edge', _params['include_mute_edge']))

        if _params['include_profile_interstitial_type']:
            _form_params.append(('include_profile_interstitial_type', _params['include_profile_interstitial_type']))

        if _params['include_want_retweets']:
            _form_params.append(('include_want_retweets', _params['include_want_retweets']))

        if _params['skip_status']:
            _form_params.append(('skip_status', _params['skip_status']))

        if _params['user_id']:
            _form_params.append(('user_id', _params['user_id']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ClientLanguage', 'CookieCt0', 'ActiveUser', 'UserAgent', 'CookieAuthToken', 'AuthType', 'CsrfToken', 'GuestToken', 'BearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/1.1/friendships/create.json', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_destroy_friendships(self, include_blocked_by : StrictInt, include_blocking : StrictInt, include_can_dm : StrictInt, include_can_media_tag : StrictInt, include_ext_has_nft_avatar : StrictInt, include_ext_is_blue_verified : StrictInt, include_ext_profile_image_shape : StrictInt, include_ext_verified_type : StrictInt, include_followed_by : StrictInt, include_mute_edge : StrictInt, include_profile_interstitial_type : StrictInt, include_want_retweets : StrictInt, skip_status : StrictInt, user_id : StrictStr, **kwargs) -> None:  # noqa: E501
        """post_destroy_friendships  # noqa: E501

        post destroy friendships  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_destroy_friendships(include_blocked_by, include_blocking, include_can_dm, include_can_media_tag, include_ext_has_nft_avatar, include_ext_is_blue_verified, include_ext_profile_image_shape, include_ext_verified_type, include_followed_by, include_mute_edge, include_profile_interstitial_type, include_want_retweets, skip_status, user_id, async_req=True)
        >>> result = thread.get()

        :param include_blocked_by: (required)
        :type include_blocked_by: int
        :param include_blocking: (required)
        :type include_blocking: int
        :param include_can_dm: (required)
        :type include_can_dm: int
        :param include_can_media_tag: (required)
        :type include_can_media_tag: int
        :param include_ext_has_nft_avatar: (required)
        :type include_ext_has_nft_avatar: int
        :param include_ext_is_blue_verified: (required)
        :type include_ext_is_blue_verified: int
        :param include_ext_profile_image_shape: (required)
        :type include_ext_profile_image_shape: int
        :param include_ext_verified_type: (required)
        :type include_ext_verified_type: int
        :param include_followed_by: (required)
        :type include_followed_by: int
        :param include_mute_edge: (required)
        :type include_mute_edge: int
        :param include_profile_interstitial_type: (required)
        :type include_profile_interstitial_type: int
        :param include_want_retweets: (required)
        :type include_want_retweets: int
        :param skip_status: (required)
        :type skip_status: int
        :param user_id: (required)
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the post_destroy_friendships_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.post_destroy_friendships_with_http_info(include_blocked_by, include_blocking, include_can_dm, include_can_media_tag, include_ext_has_nft_avatar, include_ext_is_blue_verified, include_ext_profile_image_shape, include_ext_verified_type, include_followed_by, include_mute_edge, include_profile_interstitial_type, include_want_retweets, skip_status, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def post_destroy_friendships_with_http_info(self, include_blocked_by : StrictInt, include_blocking : StrictInt, include_can_dm : StrictInt, include_can_media_tag : StrictInt, include_ext_has_nft_avatar : StrictInt, include_ext_is_blue_verified : StrictInt, include_ext_profile_image_shape : StrictInt, include_ext_verified_type : StrictInt, include_followed_by : StrictInt, include_mute_edge : StrictInt, include_profile_interstitial_type : StrictInt, include_want_retweets : StrictInt, skip_status : StrictInt, user_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """post_destroy_friendships  # noqa: E501

        post destroy friendships  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_destroy_friendships_with_http_info(include_blocked_by, include_blocking, include_can_dm, include_can_media_tag, include_ext_has_nft_avatar, include_ext_is_blue_verified, include_ext_profile_image_shape, include_ext_verified_type, include_followed_by, include_mute_edge, include_profile_interstitial_type, include_want_retweets, skip_status, user_id, async_req=True)
        >>> result = thread.get()

        :param include_blocked_by: (required)
        :type include_blocked_by: int
        :param include_blocking: (required)
        :type include_blocking: int
        :param include_can_dm: (required)
        :type include_can_dm: int
        :param include_can_media_tag: (required)
        :type include_can_media_tag: int
        :param include_ext_has_nft_avatar: (required)
        :type include_ext_has_nft_avatar: int
        :param include_ext_is_blue_verified: (required)
        :type include_ext_is_blue_verified: int
        :param include_ext_profile_image_shape: (required)
        :type include_ext_profile_image_shape: int
        :param include_ext_verified_type: (required)
        :type include_ext_verified_type: int
        :param include_followed_by: (required)
        :type include_followed_by: int
        :param include_mute_edge: (required)
        :type include_mute_edge: int
        :param include_profile_interstitial_type: (required)
        :type include_profile_interstitial_type: int
        :param include_want_retweets: (required)
        :type include_want_retweets: int
        :param skip_status: (required)
        :type skip_status: int
        :param user_id: (required)
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'include_blocked_by',
            'include_blocking',
            'include_can_dm',
            'include_can_media_tag',
            'include_ext_has_nft_avatar',
            'include_ext_is_blue_verified',
            'include_ext_profile_image_shape',
            'include_ext_verified_type',
            'include_followed_by',
            'include_mute_edge',
            'include_profile_interstitial_type',
            'include_want_retweets',
            'skip_status',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_destroy_friendships" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['include_blocked_by']:
            _form_params.append(('include_blocked_by', _params['include_blocked_by']))

        if _params['include_blocking']:
            _form_params.append(('include_blocking', _params['include_blocking']))

        if _params['include_can_dm']:
            _form_params.append(('include_can_dm', _params['include_can_dm']))

        if _params['include_can_media_tag']:
            _form_params.append(('include_can_media_tag', _params['include_can_media_tag']))

        if _params['include_ext_has_nft_avatar']:
            _form_params.append(('include_ext_has_nft_avatar', _params['include_ext_has_nft_avatar']))

        if _params['include_ext_is_blue_verified']:
            _form_params.append(('include_ext_is_blue_verified', _params['include_ext_is_blue_verified']))

        if _params['include_ext_profile_image_shape']:
            _form_params.append(('include_ext_profile_image_shape', _params['include_ext_profile_image_shape']))

        if _params['include_ext_verified_type']:
            _form_params.append(('include_ext_verified_type', _params['include_ext_verified_type']))

        if _params['include_followed_by']:
            _form_params.append(('include_followed_by', _params['include_followed_by']))

        if _params['include_mute_edge']:
            _form_params.append(('include_mute_edge', _params['include_mute_edge']))

        if _params['include_profile_interstitial_type']:
            _form_params.append(('include_profile_interstitial_type', _params['include_profile_interstitial_type']))

        if _params['include_want_retweets']:
            _form_params.append(('include_want_retweets', _params['include_want_retweets']))

        if _params['skip_status']:
            _form_params.append(('skip_status', _params['skip_status']))

        if _params['user_id']:
            _form_params.append(('user_id', _params['user_id']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ClientLanguage', 'CookieCt0', 'ActiveUser', 'UserAgent', 'CookieAuthToken', 'AuthType', 'CsrfToken', 'GuestToken', 'BearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/1.1/friendships/destroy.json', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

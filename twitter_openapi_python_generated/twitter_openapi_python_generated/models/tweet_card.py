# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from twitter_openapi_python_generated.models.tweet_card_legacy import TweetCardLegacy

class TweetCard(BaseModel):
    """
    TweetCard
    """
    legacy: Optional[TweetCardLegacy] = None
    rest_id: Optional[StrictStr] = None
    __properties = ["legacy", "rest_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TweetCard:
        """Create an instance of TweetCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of legacy
        if self.legacy:
            _dict['legacy'] = self.legacy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TweetCard:
        """Create an instance of TweetCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TweetCard.parse_obj(obj)

        _obj = TweetCard.parse_obj({
            "legacy": TweetCardLegacy.from_dict(obj.get("legacy")) if obj.get("legacy") is not None else None,
            "rest_id": obj.get("rest_id")
        })
        return _obj



# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr

class UserResultByScreenNameLegacy(BaseModel):
    """
    UserResultByScreenNameLegacy
    """
    blocked_by: Optional[StrictBool] = None
    blocking: Optional[StrictBool] = None
    followed_by: Optional[StrictBool] = None
    following: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    protected: Optional[StrictBool] = None
    screen_name: Optional[StrictStr] = None
    __properties = ["blocked_by", "blocking", "followed_by", "following", "name", "protected", "screen_name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserResultByScreenNameLegacy:
        """Create an instance of UserResultByScreenNameLegacy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserResultByScreenNameLegacy:
        """Create an instance of UserResultByScreenNameLegacy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserResultByScreenNameLegacy.parse_obj(obj)

        _obj = UserResultByScreenNameLegacy.parse_obj({
            "blocked_by": obj.get("blocked_by"),
            "blocking": obj.get("blocking"),
            "followed_by": obj.get("followed_by"),
            "following": obj.get("following"),
            "name": obj.get("name"),
            "protected": obj.get("protected"),
            "screen_name": obj.get("screen_name")
        })
        return _obj



# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from twitter_openapi_python_generated.models.community_delete_action_result import CommunityDeleteActionResult
from twitter_openapi_python_generated.models.community_join_action_union import CommunityJoinActionUnion
from twitter_openapi_python_generated.models.community_leave_action_result import CommunityLeaveActionResult
from twitter_openapi_python_generated.models.community_pin_action_result import CommunityPinActionResult
from twitter_openapi_python_generated.models.community_unpin_action_result import CommunityUnpinActionResult
from typing import Optional, Set
from typing_extensions import Self

class CommunityActions(BaseModel):
    """
    CommunityActions
    """ # noqa: E501
    delete_action_result: Optional[CommunityDeleteActionResult] = None
    join_action_result: Optional[CommunityJoinActionUnion] = None
    leave_action_result: Optional[CommunityLeaveActionResult] = None
    pin_action_result: Optional[CommunityPinActionResult] = None
    unpin_action_result: Optional[CommunityUnpinActionResult] = None
    __properties: ClassVar[List[str]] = ["delete_action_result", "join_action_result", "leave_action_result", "pin_action_result", "unpin_action_result"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommunityActions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delete_action_result
        if self.delete_action_result:
            _dict['delete_action_result'] = self.delete_action_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of join_action_result
        if self.join_action_result:
            _dict['join_action_result'] = self.join_action_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leave_action_result
        if self.leave_action_result:
            _dict['leave_action_result'] = self.leave_action_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pin_action_result
        if self.pin_action_result:
            _dict['pin_action_result'] = self.pin_action_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unpin_action_result
        if self.unpin_action_result:
            _dict['unpin_action_result'] = self.unpin_action_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommunityActions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "delete_action_result": CommunityDeleteActionResult.from_dict(obj["delete_action_result"]) if obj.get("delete_action_result") is not None else None,
            "join_action_result": CommunityJoinActionUnion.from_dict(obj["join_action_result"]) if obj.get("join_action_result") is not None else None,
            "leave_action_result": CommunityLeaveActionResult.from_dict(obj["leave_action_result"]) if obj.get("leave_action_result") is not None else None,
            "pin_action_result": CommunityPinActionResult.from_dict(obj["pin_action_result"]) if obj.get("pin_action_result") is not None else None,
            "unpin_action_result": CommunityUnpinActionResult.from_dict(obj["unpin_action_result"]) if obj.get("unpin_action_result") is not None else None
        })
        return _obj



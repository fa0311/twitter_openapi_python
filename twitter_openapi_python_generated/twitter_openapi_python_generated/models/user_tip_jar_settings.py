# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserTipJarSettings(BaseModel):
    """
    UserTipJarSettings
    """ # noqa: E501
    bandcamp_handle: Optional[StrictStr] = None
    bitcoin_handle: Optional[StrictStr] = None
    cash_app_handle: Optional[StrictStr] = None
    ethereum_handle: Optional[StrictStr] = None
    gofundme_handle: Optional[StrictStr] = None
    is_enabled: Optional[StrictBool] = None
    patreon_handle: Optional[StrictStr] = None
    pay_pal_handle: Optional[StrictStr] = None
    venmo_handle: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["bandcamp_handle", "bitcoin_handle", "cash_app_handle", "ethereum_handle", "gofundme_handle", "is_enabled", "patreon_handle", "pay_pal_handle", "venmo_handle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserTipJarSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserTipJarSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandcamp_handle": obj.get("bandcamp_handle"),
            "bitcoin_handle": obj.get("bitcoin_handle"),
            "cash_app_handle": obj.get("cash_app_handle"),
            "ethereum_handle": obj.get("ethereum_handle"),
            "gofundme_handle": obj.get("gofundme_handle"),
            "is_enabled": obj.get("is_enabled"),
            "patreon_handle": obj.get("patreon_handle"),
            "pay_pal_handle": obj.get("pay_pal_handle"),
            "venmo_handle": obj.get("venmo_handle")
        })
        return _obj



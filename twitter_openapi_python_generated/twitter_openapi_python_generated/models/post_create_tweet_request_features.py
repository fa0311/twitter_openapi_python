# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool

class PostCreateTweetRequestFeatures(BaseModel):
    """
    PostCreateTweetRequestFeatures
    """
    blue_business_profile_image_shape_enabled: StrictBool = Field(...)
    freedom_of_speech_not_reach_fetch_enabled: StrictBool = Field(...)
    graphql_is_translatable_rweb_tweet_is_translatable_enabled: StrictBool = Field(...)
    interactive_text_enabled: StrictBool = Field(...)
    longform_notetweets_consumption_enabled: StrictBool = Field(...)
    longform_notetweets_rich_text_read_enabled: StrictBool = Field(...)
    responsive_web_edit_tweet_api_enabled: StrictBool = Field(...)
    responsive_web_enhance_cards_enabled: StrictBool = Field(...)
    responsive_web_graphql_exclude_directive_enabled: StrictBool = Field(...)
    responsive_web_graphql_skip_user_profile_image_extensions_enabled: StrictBool = Field(...)
    responsive_web_graphql_timeline_navigation_enabled: StrictBool = Field(...)
    responsive_web_text_conversations_enabled: StrictBool = Field(...)
    standardized_nudges_misinfo: StrictBool = Field(...)
    tweet_awards_web_tipping_enabled: StrictBool = Field(...)
    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled: StrictBool = Field(...)
    tweetypie_unmention_optimization_enabled: StrictBool = Field(...)
    verified_phone_label_enabled: StrictBool = Field(...)
    vibe_api_enabled: StrictBool = Field(...)
    view_counts_everywhere_api_enabled: StrictBool = Field(...)
    __properties = ["blue_business_profile_image_shape_enabled", "freedom_of_speech_not_reach_fetch_enabled", "graphql_is_translatable_rweb_tweet_is_translatable_enabled", "interactive_text_enabled", "longform_notetweets_consumption_enabled", "longform_notetweets_rich_text_read_enabled", "responsive_web_edit_tweet_api_enabled", "responsive_web_enhance_cards_enabled", "responsive_web_graphql_exclude_directive_enabled", "responsive_web_graphql_skip_user_profile_image_extensions_enabled", "responsive_web_graphql_timeline_navigation_enabled", "responsive_web_text_conversations_enabled", "standardized_nudges_misinfo", "tweet_awards_web_tipping_enabled", "tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled", "tweetypie_unmention_optimization_enabled", "verified_phone_label_enabled", "vibe_api_enabled", "view_counts_everywhere_api_enabled"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostCreateTweetRequestFeatures:
        """Create an instance of PostCreateTweetRequestFeatures from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostCreateTweetRequestFeatures:
        """Create an instance of PostCreateTweetRequestFeatures from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostCreateTweetRequestFeatures.parse_obj(obj)

        _obj = PostCreateTweetRequestFeatures.parse_obj({
            "blue_business_profile_image_shape_enabled": obj.get("blue_business_profile_image_shape_enabled") if obj.get("blue_business_profile_image_shape_enabled") is not None else True,
            "freedom_of_speech_not_reach_fetch_enabled": obj.get("freedom_of_speech_not_reach_fetch_enabled") if obj.get("freedom_of_speech_not_reach_fetch_enabled") is not None else True,
            "graphql_is_translatable_rweb_tweet_is_translatable_enabled": obj.get("graphql_is_translatable_rweb_tweet_is_translatable_enabled") if obj.get("graphql_is_translatable_rweb_tweet_is_translatable_enabled") is not None else True,
            "interactive_text_enabled": obj.get("interactive_text_enabled") if obj.get("interactive_text_enabled") is not None else True,
            "longform_notetweets_consumption_enabled": obj.get("longform_notetweets_consumption_enabled") if obj.get("longform_notetweets_consumption_enabled") is not None else True,
            "longform_notetweets_rich_text_read_enabled": obj.get("longform_notetweets_rich_text_read_enabled") if obj.get("longform_notetweets_rich_text_read_enabled") is not None else True,
            "responsive_web_edit_tweet_api_enabled": obj.get("responsive_web_edit_tweet_api_enabled") if obj.get("responsive_web_edit_tweet_api_enabled") is not None else True,
            "responsive_web_enhance_cards_enabled": obj.get("responsive_web_enhance_cards_enabled") if obj.get("responsive_web_enhance_cards_enabled") is not None else False,
            "responsive_web_graphql_exclude_directive_enabled": obj.get("responsive_web_graphql_exclude_directive_enabled") if obj.get("responsive_web_graphql_exclude_directive_enabled") is not None else True,
            "responsive_web_graphql_skip_user_profile_image_extensions_enabled": obj.get("responsive_web_graphql_skip_user_profile_image_extensions_enabled") if obj.get("responsive_web_graphql_skip_user_profile_image_extensions_enabled") is not None else False,
            "responsive_web_graphql_timeline_navigation_enabled": obj.get("responsive_web_graphql_timeline_navigation_enabled") if obj.get("responsive_web_graphql_timeline_navigation_enabled") is not None else True,
            "responsive_web_text_conversations_enabled": obj.get("responsive_web_text_conversations_enabled") if obj.get("responsive_web_text_conversations_enabled") is not None else False,
            "standardized_nudges_misinfo": obj.get("standardized_nudges_misinfo") if obj.get("standardized_nudges_misinfo") is not None else True,
            "tweet_awards_web_tipping_enabled": obj.get("tweet_awards_web_tipping_enabled") if obj.get("tweet_awards_web_tipping_enabled") is not None else False,
            "tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled": obj.get("tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled") if obj.get("tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled") is not None else False,
            "tweetypie_unmention_optimization_enabled": obj.get("tweetypie_unmention_optimization_enabled") if obj.get("tweetypie_unmention_optimization_enabled") is not None else True,
            "verified_phone_label_enabled": obj.get("verified_phone_label_enabled") if obj.get("verified_phone_label_enabled") is not None else False,
            "vibe_api_enabled": obj.get("vibe_api_enabled") if obj.get("vibe_api_enabled") is not None else True,
            "view_counts_everywhere_api_enabled": obj.get("view_counts_everywhere_api_enabled") if obj.get("view_counts_everywhere_api_enabled") is not None else True
        })
        return _obj



# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class PostCreateTweetRequestFeatures(BaseModel):
    """
    PostCreateTweetRequestFeatures
    """ # noqa: E501
    articles_preview_enabled: StrictBool
    c9s_tweet_anatomy_moderator_badge_enabled: StrictBool
    communities_web_enable_tweet_community_results_fetch: StrictBool
    creator_subscriptions_quote_tweet_preview_enabled: StrictBool
    freedom_of_speech_not_reach_fetch_enabled: StrictBool
    graphql_is_translatable_rweb_tweet_is_translatable_enabled: StrictBool
    longform_notetweets_consumption_enabled: StrictBool
    longform_notetweets_inline_media_enabled: StrictBool
    longform_notetweets_rich_text_read_enabled: StrictBool
    premium_content_api_read_enabled: StrictBool
    profile_label_improvements_pcf_label_in_post_enabled: StrictBool
    responsive_web_edit_tweet_api_enabled: StrictBool
    responsive_web_enhance_cards_enabled: StrictBool
    responsive_web_graphql_skip_user_profile_image_extensions_enabled: StrictBool
    responsive_web_graphql_timeline_navigation_enabled: StrictBool
    responsive_web_grok_analysis_button_from_backend: StrictBool
    responsive_web_grok_analyze_button_fetch_trends_enabled: StrictBool
    responsive_web_grok_analyze_post_followups_enabled: StrictBool
    responsive_web_grok_image_annotation_enabled: StrictBool
    responsive_web_grok_share_attachment_enabled: StrictBool
    responsive_web_grok_show_grok_translated_post: StrictBool
    responsive_web_jetfuel_frame: StrictBool
    responsive_web_twitter_article_tweet_consumption_enabled: StrictBool
    rweb_tipjar_consumption_enabled: StrictBool
    standardized_nudges_misinfo: StrictBool
    tweet_awards_web_tipping_enabled: StrictBool
    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled: StrictBool
    verified_phone_label_enabled: StrictBool
    view_counts_everywhere_api_enabled: StrictBool
    __properties: ClassVar[List[str]] = ["articles_preview_enabled", "c9s_tweet_anatomy_moderator_badge_enabled", "communities_web_enable_tweet_community_results_fetch", "creator_subscriptions_quote_tweet_preview_enabled", "freedom_of_speech_not_reach_fetch_enabled", "graphql_is_translatable_rweb_tweet_is_translatable_enabled", "longform_notetweets_consumption_enabled", "longform_notetweets_inline_media_enabled", "longform_notetweets_rich_text_read_enabled", "premium_content_api_read_enabled", "profile_label_improvements_pcf_label_in_post_enabled", "responsive_web_edit_tweet_api_enabled", "responsive_web_enhance_cards_enabled", "responsive_web_graphql_skip_user_profile_image_extensions_enabled", "responsive_web_graphql_timeline_navigation_enabled", "responsive_web_grok_analysis_button_from_backend", "responsive_web_grok_analyze_button_fetch_trends_enabled", "responsive_web_grok_analyze_post_followups_enabled", "responsive_web_grok_image_annotation_enabled", "responsive_web_grok_share_attachment_enabled", "responsive_web_grok_show_grok_translated_post", "responsive_web_jetfuel_frame", "responsive_web_twitter_article_tweet_consumption_enabled", "rweb_tipjar_consumption_enabled", "standardized_nudges_misinfo", "tweet_awards_web_tipping_enabled", "tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled", "verified_phone_label_enabled", "view_counts_everywhere_api_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostCreateTweetRequestFeatures from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostCreateTweetRequestFeatures from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "articles_preview_enabled": obj.get("articles_preview_enabled") if obj.get("articles_preview_enabled") is not None else True,
            "c9s_tweet_anatomy_moderator_badge_enabled": obj.get("c9s_tweet_anatomy_moderator_badge_enabled") if obj.get("c9s_tweet_anatomy_moderator_badge_enabled") is not None else True,
            "communities_web_enable_tweet_community_results_fetch": obj.get("communities_web_enable_tweet_community_results_fetch") if obj.get("communities_web_enable_tweet_community_results_fetch") is not None else True,
            "creator_subscriptions_quote_tweet_preview_enabled": obj.get("creator_subscriptions_quote_tweet_preview_enabled") if obj.get("creator_subscriptions_quote_tweet_preview_enabled") is not None else False,
            "freedom_of_speech_not_reach_fetch_enabled": obj.get("freedom_of_speech_not_reach_fetch_enabled") if obj.get("freedom_of_speech_not_reach_fetch_enabled") is not None else True,
            "graphql_is_translatable_rweb_tweet_is_translatable_enabled": obj.get("graphql_is_translatable_rweb_tweet_is_translatable_enabled") if obj.get("graphql_is_translatable_rweb_tweet_is_translatable_enabled") is not None else True,
            "longform_notetweets_consumption_enabled": obj.get("longform_notetweets_consumption_enabled") if obj.get("longform_notetweets_consumption_enabled") is not None else True,
            "longform_notetweets_inline_media_enabled": obj.get("longform_notetweets_inline_media_enabled") if obj.get("longform_notetweets_inline_media_enabled") is not None else True,
            "longform_notetweets_rich_text_read_enabled": obj.get("longform_notetweets_rich_text_read_enabled") if obj.get("longform_notetweets_rich_text_read_enabled") is not None else True,
            "premium_content_api_read_enabled": obj.get("premium_content_api_read_enabled") if obj.get("premium_content_api_read_enabled") is not None else False,
            "profile_label_improvements_pcf_label_in_post_enabled": obj.get("profile_label_improvements_pcf_label_in_post_enabled") if obj.get("profile_label_improvements_pcf_label_in_post_enabled") is not None else True,
            "responsive_web_edit_tweet_api_enabled": obj.get("responsive_web_edit_tweet_api_enabled") if obj.get("responsive_web_edit_tweet_api_enabled") is not None else True,
            "responsive_web_enhance_cards_enabled": obj.get("responsive_web_enhance_cards_enabled") if obj.get("responsive_web_enhance_cards_enabled") is not None else False,
            "responsive_web_graphql_skip_user_profile_image_extensions_enabled": obj.get("responsive_web_graphql_skip_user_profile_image_extensions_enabled") if obj.get("responsive_web_graphql_skip_user_profile_image_extensions_enabled") is not None else False,
            "responsive_web_graphql_timeline_navigation_enabled": obj.get("responsive_web_graphql_timeline_navigation_enabled") if obj.get("responsive_web_graphql_timeline_navigation_enabled") is not None else True,
            "responsive_web_grok_analysis_button_from_backend": obj.get("responsive_web_grok_analysis_button_from_backend") if obj.get("responsive_web_grok_analysis_button_from_backend") is not None else False,
            "responsive_web_grok_analyze_button_fetch_trends_enabled": obj.get("responsive_web_grok_analyze_button_fetch_trends_enabled") if obj.get("responsive_web_grok_analyze_button_fetch_trends_enabled") is not None else False,
            "responsive_web_grok_analyze_post_followups_enabled": obj.get("responsive_web_grok_analyze_post_followups_enabled") if obj.get("responsive_web_grok_analyze_post_followups_enabled") is not None else True,
            "responsive_web_grok_image_annotation_enabled": obj.get("responsive_web_grok_image_annotation_enabled") if obj.get("responsive_web_grok_image_annotation_enabled") is not None else True,
            "responsive_web_grok_share_attachment_enabled": obj.get("responsive_web_grok_share_attachment_enabled") if obj.get("responsive_web_grok_share_attachment_enabled") is not None else True,
            "responsive_web_grok_show_grok_translated_post": obj.get("responsive_web_grok_show_grok_translated_post") if obj.get("responsive_web_grok_show_grok_translated_post") is not None else False,
            "responsive_web_jetfuel_frame": obj.get("responsive_web_jetfuel_frame") if obj.get("responsive_web_jetfuel_frame") is not None else False,
            "responsive_web_twitter_article_tweet_consumption_enabled": obj.get("responsive_web_twitter_article_tweet_consumption_enabled") if obj.get("responsive_web_twitter_article_tweet_consumption_enabled") is not None else True,
            "rweb_tipjar_consumption_enabled": obj.get("rweb_tipjar_consumption_enabled") if obj.get("rweb_tipjar_consumption_enabled") is not None else True,
            "standardized_nudges_misinfo": obj.get("standardized_nudges_misinfo") if obj.get("standardized_nudges_misinfo") is not None else True,
            "tweet_awards_web_tipping_enabled": obj.get("tweet_awards_web_tipping_enabled") if obj.get("tweet_awards_web_tipping_enabled") is not None else False,
            "tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled": obj.get("tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled") if obj.get("tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled") is not None else True,
            "verified_phone_label_enabled": obj.get("verified_phone_label_enabled") if obj.get("verified_phone_label_enabled") is not None else False,
            "view_counts_everywhere_api_enabled": obj.get("view_counts_everywhere_api_enabled") if obj.get("view_counts_everywhere_api_enabled") is not None else True
        })
        return _obj



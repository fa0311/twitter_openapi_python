# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import twitter_openapi_python_generated
from twitter_openapi_python_generated.models.content_union import ContentUnion  # noqa: E501
from twitter_openapi_python_generated.rest import ApiException

class TestContentUnion(unittest.TestCase):
    """ContentUnion unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ContentUnion
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ContentUnion`
        """
        model = twitter_openapi_python_generated.models.content_union.ContentUnion()  # noqa: E501
        if include_optional :
            return ContentUnion(
                typename = 'TimelineTweet', 
                client_event_info = { }, 
                entry_type = 'TimelineTimelineItem', 
                feedback_info = { }, 
                item_content = None, 
                display_type = '', 
                footer = { }, 
                header = { }, 
                items = [
                    twitter_openapi_python_generated.models.module_item.ModuleItem(
                        entry_id = '25375e030fccba00917317c574773100bf03b5f', 
                        item = twitter_openapi_python_generated.models.module_entry.ModuleEntry(
                            client_event_info = { }, 
                            item_content = null, ), )
                    ], 
                cursor_type = 'Top', 
                item_type = 'TimelineTimelineItem', 
                value = ''
            )
        else :
            return ContentUnion(
                typename = 'TimelineTweet',
                client_event_info = { },
                entry_type = 'TimelineTimelineItem',
                item_content = None,
                display_type = '',
                cursor_type = 'Top',
                value = '',
        )
        """

    def testContentUnion(self):
        """Test ContentUnion"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from twitter_openapi_python_generated.models.item_content_union import ItemContentUnion

class TestItemContentUnion(unittest.TestCase):
    """ItemContentUnion unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ItemContentUnion:
        """Test ItemContentUnion
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ItemContentUnion`
        """
        model = ItemContentUnion()
        if include_optional:
            return ItemContentUnion(
                typename = 'TimelineTweet',
                has_moderated_replies = True,
                highlights = twitter_openapi_python_generated.models.highlight.Highlight(
                    text_highlights = [
                        twitter_openapi_python_generated.models.text_highlight.TextHighlight(
                            end_index = 56, 
                            start_index = 56, )
                        ], ),
                item_type = 'TimelineTweet',
                promoted_metadata = { },
                social_context = None,
                tweet_display_type = 'Tweet',
                tweet_results = twitter_openapi_python_generated.models.item_result.ItemResult(
                    __typename = 'TimelineTweet', 
                    result = null, ),
                cursor_type = 'Top',
                display_treatment = twitter_openapi_python_generated.models.display_treatment.DisplayTreatment(
                    action_text = '', 
                    label_text = '', ),
                entry_type = 'TimelineTimelineItem',
                stop_on_empty_response = True,
                value = '',
                user_display_type = 'User',
                user_results = twitter_openapi_python_generated.models.user_results.UserResults(
                    result = null, ),
                tombstone_display_type = 'Inline',
                tombstone_info = twitter_openapi_python_generated.models.tombstone_info.TombstoneInfo(
                    rich_text = twitter_openapi_python_generated.models.tombstone_rich_text.TombstoneRichText(
                        entities = [
                            twitter_openapi_python_generated.models.tombstone_entity.TombstoneEntity(
                                from_index = 56, 
                                ref = twitter_openapi_python_generated.models.tombstone_ref.TombstoneRef(
                                    type = 'TimelineUrl', 
                                    url = '', 
                                    url_type = 'ExternalUrl', ), 
                                to_index = 56, )
                            ], 
                        rtl = True, 
                        text = '', ), 
                    text = '', )
            )
        else:
            return ItemContentUnion(
                typename = 'TimelineTweet',
                item_type = 'TimelineTweet',
                tweet_display_type = 'Tweet',
                tweet_results = twitter_openapi_python_generated.models.item_result.ItemResult(
                    __typename = 'TimelineTweet', 
                    result = null, ),
                cursor_type = 'Top',
                value = '',
                user_display_type = 'User',
                user_results = twitter_openapi_python_generated.models.user_results.UserResults(
                    result = null, ),
        )
        """

    def testItemContentUnion(self):
        """Test ItemContentUnion"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

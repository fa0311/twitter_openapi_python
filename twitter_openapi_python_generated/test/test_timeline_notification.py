# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from twitter_openapi_python_generated.models.timeline_notification import TimelineNotification

class TestTimelineNotification(unittest.TestCase):
    """TimelineNotification unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TimelineNotification:
        """Test TimelineNotification
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TimelineNotification`
        """
        model = TimelineNotification()
        if include_optional:
            return TimelineNotification(
                typename = 'TimelineTweet',
                id = '',
                item_type = 'TimelineTweet',
                notification_icon = '',
                notification_url = twitter_openapi_python_generated.models.social_context_landing_url.SocialContextLandingUrl(
                    url = '', 
                    url_type = 'DeepLink', 
                    urt_endpoint_options = twitter_openapi_python_generated.models.urt_endpoint_options.UrtEndpointOptions(
                        request_params = [
                            twitter_openapi_python_generated.models.urt_endpoint_request_params.UrtEndpointRequestParams(
                                key = '', 
                                value = '', )
                            ], 
                        title = '', ), ),
                rich_message = twitter_openapi_python_generated.models.rich_message.RichMessage(
                    rtl = True, 
                    text = '', ),
                template = twitter_openapi_python_generated.models.notification_template.NotificationTemplate(
                    __typename = 'TimelineTweet', 
                    from_users = [
                        None
                        ], 
                    target_objects = [
                        None
                        ], ),
                timestamp_ms = ''
            )
        else:
            return TimelineNotification(
                typename = 'TimelineTweet',
                id = '',
                item_type = 'TimelineTweet',
                notification_icon = '',
                notification_url = twitter_openapi_python_generated.models.social_context_landing_url.SocialContextLandingUrl(
                    url = '', 
                    url_type = 'DeepLink', 
                    urt_endpoint_options = twitter_openapi_python_generated.models.urt_endpoint_options.UrtEndpointOptions(
                        request_params = [
                            twitter_openapi_python_generated.models.urt_endpoint_request_params.UrtEndpointRequestParams(
                                key = '', 
                                value = '', )
                            ], 
                        title = '', ), ),
                rich_message = twitter_openapi_python_generated.models.rich_message.RichMessage(
                    rtl = True, 
                    text = '', ),
                template = twitter_openapi_python_generated.models.notification_template.NotificationTemplate(
                    __typename = 'TimelineTweet', 
                    from_users = [
                        None
                        ], 
                    target_objects = [
                        None
                        ], ),
                timestamp_ms = '',
        )
        """

    def testTimelineNotification(self):
        """Test TimelineNotification"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
